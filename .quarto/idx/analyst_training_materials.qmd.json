{"title":"Simple Wrangling 101","markdown":{"yaml":{"title":"Simple Wrangling 101","format":{"html":{"code-fold":"show","number-sections":false}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n```{r}\n#| echo: false\n#| message: false\nlibrary(tidyverse)\nlibrary(readxl)\n```\n\n\nThis document will show at a high level some common code that is useful for managing and wrangling data within RStudio.\n\nFor reference, we will assume that the data files are saved as Excel files (however we actually **highly recommend** saving social listening exports as CSVs).\n\n# Load in data\n\n### Read in individual file:\n\n```{r}\n#| eval: false\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nmy_data <- read_excel(\"./PATH_TO_DATA/name_of_excel_file.xlsx\")\n\n## or you may have a csv\n\nmy_data <- read_csv(\"./PATH_TO_DATA/name_of_csv_file.csv\")\n```\n\n### Read in multiple files at once:\n\n:::{.callout-tip collapse=\"true\"}\n## Slack Overflow already answers this question\n\nCheck it out [here](https://slack-overflow-help.netlify.app/post/2022-05-20-reading_multiple_files/reading-in-multiple-data-files-at-once/)\n:::\n\nWhen you have multiple files with the same structure (same columns) that need combining, you can read them all in at once rather than doing it manually one by one. This is the case when we read in multiple exported files from the same social listening query.\n\nThe logic is straightforward: get a list of all the file paths, read each file, then stack them together into one dataset.\n\n#### Step 1: Get the file paths\n\n```{r}\ndirectory_path <- (\"~/Google Drive/Shared drives/SC -  Capture Intelligence/US Projects/Microsoft/829 - Microsoft Perceptions - Peak & Pits/Data/Copilot Data/Copilot All Up Data/\")\n\npaths <- list.files(path = directory_path, full.names = TRUE, recursive = TRUE, all.files = TRUE)\n```\n\n:::{.callout-tip collapse=\"true\"}\n## The `list.files()` function\n\nThe recursive = TRUE argument means R will look inside any subfolders too. If your files are all in one folder, you might want recursive = FALSE instead to be safe\n:::\n\n#### Step 2: Read all the files\n\n```{r}\nall_files <- map(paths, read_excel)\n```\n\nThe `map()` function applies the same operation to each item in a list. Here, it's applying `read_excel()` to each file path, reading all your files in one go. Think of it as a more efficient way of writing multiple `read_excel()` commands.\n\n#### Step 3: Stack them together\n\n```{r}\nraw_df <- all_files %>% \n  reduce(bind_rows)\n```\n\nAt this point, all_files contains all your data, but as separate datasets in a list. The `reduce() `function combines them using `bind_rows()`, which stacks datasets on top of each other (assuming they have the same column structure).\n\n# Joining datasets\n\nJoining is used when you have two datasets that share a common identifier[s] and we want to combine information from both. This is most commonly something like `universal_message_id`. If you are familiar with SQL, these work very similarly to SQL joins.\n\nThis can broadly be considered as \"adding extra columns to our existing data\", and in some special situations also leads to increasing the number of rows too.\n\nA common example of using this in our work is when we have social posts from Sprinklr in one dataframe, and then the scores/results of a model (say our Spam classifier model) in another dataframe, and we want to append these spam classification scores to the data from the Sprinklr export.\n\nThere are few different flavours of joins, and I think this resource by [Gauden Buie is absolutely brilliant in explaining how we can understand what they do](https://github.com/gadenbuie/tidyexplain) - read it! I have unashamedly adapted the below from his document\n\n### Left Join - Keep everything from the main dataset\n\n> All rows from `x` where there are matching values in `y`, and all columns from `x` and `y`.\n\nA left join keeps all rows from your main dataset and adds matching information from the second dataset. If there's no match, you'll get NA values. This is the most common join - use it when you want to enrich your main dataset without losing any of your original data.\n\n![](images/left-join.gif)\n```{r}\n#| eval: false\ncombined_data <- main_dataset %>% \n  left_join(additional_data, by = \"shared_column\")\n```\n\n\n### Full Join - Keep everything from both datasets\n\n> All rows and all columns from both `x` and `y`. Where there are not matching values, returns NA for the one missing.\n\nA full join keeps all rows from both datasets, filling in NA where there are no matches. Use this when both datasets are equally important and you don't want to lose information from either.\n\n![](images/full-join_2.gif)\n\n```{r}\n#| eval: false\ncombined_data <- dataset_a %>% \n  full_join(dataset_b, by = \"shared_column\")\n```\n\n:::{.callout-tip collapse=\"true\"}\n## The joining column\n\nThe `by = \"column_name\"` tells R which column to use for matching. If the columns have different names, use `by = c(\"col_a\" = \"col_b\")`.\n:::\n\n# Combining datasets (stacking and side-by-side)\n\nCombining is different from joining - it's about physically putting datasets together without needing a shared identifier.\n\n### Stacking datasets (adding rows)\n\nUse this when you have the same type of data from different sources that you want in one dataset:\n\n```{r}\n#| eval: false\nstacked_data <- bind_rows(dataset_a, dataset_b, dataset_c)\n```\n:::{.callout-warning}\n## Beware of duplicates\n\nThis does not consider duplicates though- so if you have the same post in multiple datasets you will end up with multiple instances of this data point! \n:::\n\n### Side-by-side datasets (adding columns)\n\nUse this when you have different information about the same observations, in the same order:\n\n```{r}\n#| eval: false\nwider_data <- bind_cols(dataset_a, dataset_b)\n```\n\n:::{.callout-warning}\n## Be careful with bind_cols()\n\nThis assumes the rows are in exactly the same order in both datasets. If they're not, your data will be mismatched! Usually safer to use a join instead.\n:::\n\n# The key difference:\n\n* Joining makes your data \"fuller\" by adding related information based on shared identifiers\n* Binding rows makes your data \"longer\" by adding more observations of the same type\n* Binding columns makes your data \"wider\" by adding more variables about the same observations\n","srcMarkdownNoYaml":"\n\n```{r}\n#| echo: false\n#| message: false\nlibrary(tidyverse)\nlibrary(readxl)\n```\n\n# Introduction\n\nThis document will show at a high level some common code that is useful for managing and wrangling data within RStudio.\n\nFor reference, we will assume that the data files are saved as Excel files (however we actually **highly recommend** saving social listening exports as CSVs).\n\n# Load in data\n\n### Read in individual file:\n\n```{r}\n#| eval: false\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nmy_data <- read_excel(\"./PATH_TO_DATA/name_of_excel_file.xlsx\")\n\n## or you may have a csv\n\nmy_data <- read_csv(\"./PATH_TO_DATA/name_of_csv_file.csv\")\n```\n\n### Read in multiple files at once:\n\n:::{.callout-tip collapse=\"true\"}\n## Slack Overflow already answers this question\n\nCheck it out [here](https://slack-overflow-help.netlify.app/post/2022-05-20-reading_multiple_files/reading-in-multiple-data-files-at-once/)\n:::\n\nWhen you have multiple files with the same structure (same columns) that need combining, you can read them all in at once rather than doing it manually one by one. This is the case when we read in multiple exported files from the same social listening query.\n\nThe logic is straightforward: get a list of all the file paths, read each file, then stack them together into one dataset.\n\n#### Step 1: Get the file paths\n\n```{r}\ndirectory_path <- (\"~/Google Drive/Shared drives/SC -  Capture Intelligence/US Projects/Microsoft/829 - Microsoft Perceptions - Peak & Pits/Data/Copilot Data/Copilot All Up Data/\")\n\npaths <- list.files(path = directory_path, full.names = TRUE, recursive = TRUE, all.files = TRUE)\n```\n\n:::{.callout-tip collapse=\"true\"}\n## The `list.files()` function\n\nThe recursive = TRUE argument means R will look inside any subfolders too. If your files are all in one folder, you might want recursive = FALSE instead to be safe\n:::\n\n#### Step 2: Read all the files\n\n```{r}\nall_files <- map(paths, read_excel)\n```\n\nThe `map()` function applies the same operation to each item in a list. Here, it's applying `read_excel()` to each file path, reading all your files in one go. Think of it as a more efficient way of writing multiple `read_excel()` commands.\n\n#### Step 3: Stack them together\n\n```{r}\nraw_df <- all_files %>% \n  reduce(bind_rows)\n```\n\nAt this point, all_files contains all your data, but as separate datasets in a list. The `reduce() `function combines them using `bind_rows()`, which stacks datasets on top of each other (assuming they have the same column structure).\n\n# Joining datasets\n\nJoining is used when you have two datasets that share a common identifier[s] and we want to combine information from both. This is most commonly something like `universal_message_id`. If you are familiar with SQL, these work very similarly to SQL joins.\n\nThis can broadly be considered as \"adding extra columns to our existing data\", and in some special situations also leads to increasing the number of rows too.\n\nA common example of using this in our work is when we have social posts from Sprinklr in one dataframe, and then the scores/results of a model (say our Spam classifier model) in another dataframe, and we want to append these spam classification scores to the data from the Sprinklr export.\n\nThere are few different flavours of joins, and I think this resource by [Gauden Buie is absolutely brilliant in explaining how we can understand what they do](https://github.com/gadenbuie/tidyexplain) - read it! I have unashamedly adapted the below from his document\n\n### Left Join - Keep everything from the main dataset\n\n> All rows from `x` where there are matching values in `y`, and all columns from `x` and `y`.\n\nA left join keeps all rows from your main dataset and adds matching information from the second dataset. If there's no match, you'll get NA values. This is the most common join - use it when you want to enrich your main dataset without losing any of your original data.\n\n![](images/left-join.gif)\n```{r}\n#| eval: false\ncombined_data <- main_dataset %>% \n  left_join(additional_data, by = \"shared_column\")\n```\n\n\n### Full Join - Keep everything from both datasets\n\n> All rows and all columns from both `x` and `y`. Where there are not matching values, returns NA for the one missing.\n\nA full join keeps all rows from both datasets, filling in NA where there are no matches. Use this when both datasets are equally important and you don't want to lose information from either.\n\n![](images/full-join_2.gif)\n\n```{r}\n#| eval: false\ncombined_data <- dataset_a %>% \n  full_join(dataset_b, by = \"shared_column\")\n```\n\n:::{.callout-tip collapse=\"true\"}\n## The joining column\n\nThe `by = \"column_name\"` tells R which column to use for matching. If the columns have different names, use `by = c(\"col_a\" = \"col_b\")`.\n:::\n\n# Combining datasets (stacking and side-by-side)\n\nCombining is different from joining - it's about physically putting datasets together without needing a shared identifier.\n\n### Stacking datasets (adding rows)\n\nUse this when you have the same type of data from different sources that you want in one dataset:\n\n```{r}\n#| eval: false\nstacked_data <- bind_rows(dataset_a, dataset_b, dataset_c)\n```\n:::{.callout-warning}\n## Beware of duplicates\n\nThis does not consider duplicates though- so if you have the same post in multiple datasets you will end up with multiple instances of this data point! \n:::\n\n### Side-by-side datasets (adding columns)\n\nUse this when you have different information about the same observations, in the same order:\n\n```{r}\n#| eval: false\nwider_data <- bind_cols(dataset_a, dataset_b)\n```\n\n:::{.callout-warning}\n## Be careful with bind_cols()\n\nThis assumes the rows are in exactly the same order in both datasets. If they're not, your data will be mismatched! Usually safer to use a join instead.\n:::\n\n# The key difference:\n\n* Joining makes your data \"fuller\" by adding related information based on shared identifiers\n* Binding rows makes your data \"longer\" by adding more observations of the same type\n* Binding columns makes your data \"wider\" by adding more variables about the same observations\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"execute-dir":"project","engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"brand":{"light":{"brand":{"color":{"palette":{"samy-nero-black":"#232323","samy-inferno":"#FF5D17","samy-peach":"#F7AB81","samy-turquoise":"#1C7E76","samy-crimson":"#B80F0A","samy-blue":"#191970","samy-bg":"#F7F7F7","samy-green":"#028A0F"},"primary":"samy-peach","background":"samy-bg","foreground":"samy-nero-black","secondary":"samy-nero-black","danger":"samy-crimson"},"typography":{"fonts":[{"family":"Helvetica","source":"system"}],"base":{"family":"Helvetica","weight":300},"headings":{"family":"Helvetica","weight":400,"color":"samy-nero-black"},"link":{"color":"samy-nero-black","decoration":"underline"},"monospace":{"background-color":"white"},"monospace-inline":{"color":"samy-inferno","background-color":"white"},"monospace-block":{"background-color":"white"}},"logo":{"small":"/images/samy_isotype.png","medium":"/images/samy_logotype.png","large":"/images/samy_logotype.png"}},"data":{"color":{"palette":{"samy-nero-black":"#232323","samy-inferno":"#FF5D17","samy-peach":"#F7AB81","samy-turquoise":"#1C7E76","samy-crimson":"#B80F0A","samy-blue":"#191970","samy-bg":"#F7F7F7","samy-green":"#028A0F"},"primary":"samy-peach","background":"samy-bg","foreground":"samy-nero-black","secondary":"samy-nero-black","danger":"samy-crimson"},"typography":{"fonts":[{"family":"Helvetica","source":"system"}],"base":{"family":"Helvetica","weight":300},"headings":{"family":"Helvetica","weight":400,"color":"samy-nero-black"},"link":{"color":"samy-nero-black","decoration":"underline"},"monospace":{"background-color":"white"},"monospace-inline":{"color":"samy-inferno","background-color":"white"},"monospace-block":{"background-color":"white"}},"logo":{"small":"/images/samy_isotype.png","medium":"/images/samy_logotype.png","large":"/images/samy_logotype.png"}},"brandDir":"/Users/jamiehudson/Documents/work/projects/internal/analyst_training_book","projectDir":"/Users/jamiehudson/Documents/work/projects/internal/analyst_training_book","processedData":{"color":{"samy-nero-black":"#232323","samy-inferno":"#FF5D17","samy-peach":"#F7AB81","samy-turquoise":"#1C7E76","samy-crimson":"#B80F0A","samy-blue":"#191970","samy-bg":"#F7F7F7","samy-green":"#028A0F","primary":"#F7AB81","background":"#F7F7F7","foreground":"#232323","secondary":"#232323","danger":"#B80F0A"},"typography":{"base":{"family":"Helvetica","weight":300},"headings":{"family":"Helvetica","weight":400,"color":"samy-nero-black"},"link":{"color":"samy-nero-black","decoration":"underline"},"monospace":{"background-color":"white"},"monospace-inline":{"background-color":"white","color":"samy-inferno"},"monospace-block":{"background-color":"white"}},"logo":{"images":{},"small":{"light":{"path":"/images/samy_isotype.png"},"dark":{"path":"/images/samy_isotype.png"}},"medium":{"light":{"path":"/images/samy_logotype.png"},"dark":{"path":"/images/samy_logotype.png"}},"large":{"light":{"path":"/images/samy_logotype.png"},"dark":{"path":"/images/samy_logotype.png"}}}}}}},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","embed-resources":true,"highlight-style":"tango","number-sections":false,"toc":true,"toc-depth":3,"output-file":"analyst_training_materials.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","bibliography":["references.bib"],"code-annotations":"select","brand":"_brand.yml","theme":["cosmo","custom.scss"],"code-copy":true,"code-block-bg":"#FFFFFF","lightbox":true,"toc-expand":true,"toc-location":"right","number-depth":0,"title":"Simple Wrangling 101"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}